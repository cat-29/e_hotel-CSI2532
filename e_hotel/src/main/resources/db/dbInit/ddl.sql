-- Generated by the database client.
-- TYPES / ENUMS
CREATE TYPE capaciteEnum AS ENUM (
'SIMPLE',
'DOUBLE',
'TRIPLE'
);

CREATE TYPE vueEnum AS ENUM (
'MER',
'MONTAGNE'
);

CREATE TYPE roleEmployeEnum AS ENUM (
'SUPERVISEUR',
'GESTIONNAIRE',
'EMPLOYE'
);


-- Sequences
CREATE SEQUENCE hotel_id_seq;
CREATE SEQUENCE numero_chambre_id START WITH 1;

-- TABLES DECLARATION

-- Chaine_hoteliere
CREATE TABLE IF NOT EXISTS chaine_hoteliere(
nom_chaine VARCHAR(255) NOT NULL check(length(nom_chaine)>2),
nbr_hotel numeric CHECK(nbr_hotel > 0),
numero INTEGER NOT NULL check(numero>0),
rue VARCHAR(255) NOT NULL check(length(rue)>2),
ville VARCHAR(255) NOT NULL check(length(ville)>2),
province CHAR(2) NOT NULL check (province ~ '^[A-Z]{2}$'),
pays VARCHAR(255) NOT NULL check(length(pays)>2),
code_postal CHAR(6) Unique check (code_postal ~ '^([A-Z][0-9]){3}$'),
PRIMARY KEY (nom_chaine)
);

-- Telephone_chaine_hoteliere
CREATE TABLE IF NOT EXISTS telephone_chaine_hoteliere(
num_telephone numeric check(length(num_telephone::numeric::text)=10),
nom_chaine VARCHAR(255),
PRIMARY KEY (num_telephone),
FOREIGN KEY(nom_chaine) REFERENCES chaine_hoteliere
);

-- Email_chaine_hoteliere
CREATE TABLE IF NOT EXISTS email_chaine_hoteliere(
email VARCHAR(255) CHECK (email ~* '^[A-Za-z0-9._+%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$'),
nom_chaine VARCHAR(255),
PRIMARY KEY (email),
FOREIGN KEY(nom_chaine) REFERENCES chaine_hoteliere
);

-- Hotel
CREATE TABLE IF NOT EXISTS hotel(
id_hotel INTEGER NOT NULL DEFAULT nextval('hotel_id_seq'),
nom_chaine VARCHAR(255),
nom VARCHAR(255) check(length(nom)>2),
num_etoile INTEGER check(num_etoile BETWEEN 1 AND 5),
nbr_chambre INTEGER check(nbr_chambre>0),
numero INTEGER check(numero>0),
rue VARCHAR(255) check(length(rue)>2),
ville VARCHAR(255) check(length(ville)>2),
province CHAR(2) check(length(province)=2),
code_postal CHAR(6) Unique check (code_postal ~ '^([A-Z][0-9]){3}$'),
pays VARCHAR(255) check(length(pays)>2),
PRIMARY KEY (id_hotel),
FOREIGN KEY (nom_chaine) REFERENCES chaine_hoteliere(nom_chaine)
);

-- Telephone_hotel
CREATE TABLE IF NOT EXISTS telephone_hotel(
num_telephone NUMERIC check(length(num_telephone::numeric::text)=10),
id_hotel INTEGER,
PRIMARY KEY (num_telephone),
FOREIGN KEY(id_hotel) REFERENCES hotel
);

-- Email_hotel
CREATE TABLE IF NOT EXISTS email_hotel(
email VARCHAR(255) CHECK(email ~* '^[A-Za-z0-9._+%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$'),
id_hotel INTEGER,
PRIMARY KEY (email),
FOREIGN KEY(id_hotel) REFERENCES hotel
);

-- Chambre
CREATE TABLE IF NOT EXISTS chambre (
numero_chambre INTEGER NOT NULL DEFAULT nextval('numero_chambre_id'),
id_hotel INTEGER,
prix decimal(8,2) not null check (prix > 0.00 AND prix < 999999.99),
capacite_chambre capaciteEnum,
vue vueEnum,
capacite_a_etendre BOOLEAN,
PRIMARY KEY (numero_chambre,id_hotel),
FOREIGN KEY (id_hotel) REFERENCES hotel(id_hotel)
);

-- Client
CREATE TABLE IF NOT EXISTS client (
nas INTEGER check (nas >= 100000000 AND nas <= 999999999), 
prenom VARCHAR(255), 
nom_famille VARCHAR(255), 
numero INTEGER NOT NULL check (numero > 0), 
rue VARCHAR(255) NOT NULL check (length(rue) > 2), 
ville VARCHAR(255) NOT NULL check (length(ville) > 2), 
province CHAR(2) NOT NULL check (province ~ '^[A-Z]{2}$'), 
pays VARCHAR(255) NOT NULL check (length(pays) > 2), 
code_postal CHAR(6) check (code_postal ~ '^([A-Z][0-9]){3}$'), 
PRIMARY KEY (nas)
);

-- Employe
CREATE TABLE IF NOT EXISTS employe (
nas INTEGER check (nas >= 100000000 AND nas <= 999999999),
prenom VARCHAR(255) NOT NULL,
nom_famille VARCHAR(255)NOT NULL,
numero INTEGER NOT NULL check(numero>0),
rue VARCHAR(255) NOT NULL check(length(rue)>2),
ville VARCHAR(255) NOT NULL check(length(ville)>2),
province CHAR(2) NOT NULL check (province ~ '^[A-Z]{2}$'),
pays VARCHAR(255) NOT NULL check(length(pays)>2),
code_postal CHAR(6) Unique check (code_postal ~ '^([A-Z][0-9]){3}$'),
PRIMARY KEY (nas)
);

-- Travaille_pour
CREATE TABLE IF NOT EXISTS travaille_pour (
id_hotel INTEGER,
id_employe INTEGER,
role roleEmployeEnum NOT NULL,
PRIMARY KEY (id_hotel,id_employe),
FOREIGN KEY (id_hotel) REFERENCES hotel(id_hotel),
FOREIGN KEY (id_employe) REFERENCES employe(nas)
);

-- Supervise
CREATE TABLE IF NOT EXISTS supervise(
id_superviseur INTEGER,
id_employe INTEGER CHECK (id_superviseur <> id_employe),
PRIMARY KEY (id_superviseur, id_employe),
FOREIGN KEY (id_employe) REFERENCES employe(nas),
FOREIGN KEY (id_superviseur) REFERENCES employe(nas)
);


-- Dommage ajouter ici
CREATE TABLE IF NOT EXISTS dommage(
ID_DOMMAGE SERIAL, 
TYPE_DOMMAGE VARCHAR(255) CHECK(LENGTH(TYPE_DOMMAGE) > 2),
UNIQUE(TYPE_DOMMAGE),
PRIMARY KEY (ID_DOMMAGE)
);

-- Commodite ajouter ici
CREATE TABLE IF NOT EXISTS commodite(
id_commodite SERIAL NOT NULL,
type_commodite VARCHAR(255)check(length(type_commodite)>2),
UNIQUE(type_commodite),
PRIMARY KEY (id_commodite)
);

-- Subi_Dommage
CREATE TABLE IF NOT EXISTS subi_dommage (
id_dommage SERIAL,
numero_chambre INTEGER,
id_hotel INTEGER,
PRIMARY KEY (id_dommage,numero_chambre,id_hotel),
FOREIGN KEY (id_dommage) REFERENCES dommage(id_dommage),
FOREIGN KEY (numero_chambre,id_hotel) REFERENCES chambre(numero_chambre,id_hotel)
);

-- contient_commodite

CREATE TABLE IF NOT EXISTS contient_commodite (
id_commodite SERIAL,
numero_chambre INTEGER,
id_hotel INTEGER,
PRIMARY KEY (id_commodite,numero_chambre,id_hotel),
FOREIGN KEY (id_commodite) REFERENCES commodite(id_commodite),
FOREIGN KEY (numero_chambre,id_hotel) REFERENCES chambre(numero_chambre,id_hotel)
);

CREATE TABLE IF NOT EXISTS client_reserve (
id_client INTEGER,
numero_chambre INTEGER,
id_hotel INTEGER,
date_checkin DATE NOT NULL,
date_checkout DATE NOT NULL check(date_checkout > date_checkin),
prix decimal(8,2) check(prix > 0.00 AND prix < 999999.99),
PRIMARY KEY (id_client,numero_chambre,id_hotel,date_checkin,date_checkout),
FOREIGN KEY (numero_chambre,id_hotel) REFERENCES chambre(numero_chambre,id_hotel),
FOREIGN KEY (id_client) REFERENCES client(nas)
);

-- Loue_chambre
CREATE TABLE IF NOT EXISTS loue_chambre (
numero_chambre INTEGER,
id_hotel INTEGER,
id_client INTEGER,
id_employe INTEGER,
date_checkin DATE NOT NULL,
date_checkout DATE NOT NULL check(date_checkout > date_checkin),
montant_du decimal(8,2) NOT NULL,
paiement_complete BOOLEAN DEFAULT NULL,
date_paiement_complete DATE DEFAULT NULL,
PRIMARY KEY (numero_chambre,id_hotel,id_client,id_employe,date_checkin,date_checkout),
FOREIGN KEY (numero_chambre,id_hotel) REFERENCES chambre(numero_chambre,id_hotel),
FOREIGN KEY (id_client) REFERENCES client(nas),
FOREIGN KEY (id_employe) REFERENCES employe(nas)
);

-- Enregistre_client
CREATE TABLE IF NOT EXISTS enregistre_client(
id_employe INTEGER,
id_client INTEGER,
email VARCHAR(255) CHECK (email ~* '^[A-Za-z0-9._+%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$'),
date_enregistrement DATE NOT NULL,
PRIMARY KEY (id_employe, id_client),
FOREIGN KEY (id_employe) REFERENCES employe(nas),
FOREIGN KEY (id_client) REFERENCES client(nas)
);
